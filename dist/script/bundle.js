(()=>{"use strict";function e(e){return e.checked?"extract":"notExtract"}function t(e,t){return e.split(t)}function s(e){const t=[];for(let s of e)"s"!==s[s.length-1]?t.push(s):e.includes(s.substr(0,s.length-1))?t.push(s.substr(0,s.length-1)):t.push(s);return t}const n=t("be,are,is,was,were,being,been,have,has,had,having,ve do,does,doing,did,done would, will,will,willing,would, can,can,could, couldn,couth know,knows,knowing,knew,known see,sees,seeing,saw,seen may,may,might, should, get,gets,getting,got,got think,thinks,thinking,thought,thought go,goes,going,went,gone re, make,makes,making,made,made must, take,takes,taking,took,taken come,comes,coming,came,come say,says,saying,said,said put,puts,putting,put,put want,wants,wanting,wanted,wanted give,gives,giving,gave,given look,looks,looking,looked,looked find,finds,finding,found,found need,needs,needing,needed,needed like,likes,liking,liked,liked set,sets,setting,set,set use,uses,using,used,used become,becomes,becoming,became,become tell,tells,telling,told,told keep,keeps,keeping,kept,kept help,helps,helping,helped,helped work,works,working,worked,worked let,lets,letting,let,let feel,feels,feeling,felt,felt provide,provides,providing,provided,provided believe,believes,believing,believed,believed try,tries,trying,tried,tried shall,shall,should, ask,asks,asking,asked,asked remember,remembers,remembering,remembered,remembered leave,leaves,leaving,left,left show,shows,showing,showed,shown pay,pays,paying,paid,paid run,runs,running,ran,run read,reads,reading,read,read seem,seems,seeming,seemed,seemed include,includes,including,included,included bring,brings,bringing,brought,brought understand,understands,understanding,understood,understood start,starts,starting,started,started play,plays,playing,played,played cut,cuts,cutting,cut,cut live,lives,living,lived,lived meet,meets,meeting,met,met move,moves,moving,moved,moved hear,hears,hearing,heard,heard call,calls,calling,called,called stop,stops,stopping,stopped,stopped turn,turns,turning,turned,turned talk,talks,talking,talked,talked buy,buys,buying,bought,bought thank,thanks,thanking,thanked,thanked change,changes,changing,changed,changed continue,continues,continuing,continued,continued consider,considers,considering,considered,considered allow,allows,allowing,allowed,allowed hope,hopes,hoping,hoped,hoped produce,produces,producing,produced,produced stay,stays,staying,stayed,stayed appear,appears,appearing,appeared,appeared write,writes,writing,wrote,written hold,holds,holding,held,held expect,expects,expecting,expected,expected ensure,ensures,ensuring,ensured,ensured suppose,supposes,supposing,supposed,supposed wish,wishes,wishing,wished,wished carry,carries,carrying,carried,carried follow,follows,following,followed,followed offer,offers,offering,offered,offered support,supports,supporting,supported,supported accept,accepts,accepting,accepted,accepted speak,speaks,speaking,spoke,spoken lead,leads,leading,leaded,leaded remain,remains,remaining,remained,remained stand,stands,standing,stood,stood suggest,suggests,suggesting,suggested,suggested hit,hits,hitting,hit,hit develop,develops,developing,developed,developed happen,happens,happening,happened,happened sit,sits,sitting,sat,sat win,wins,winning,won,won love,loves,loving,loved,loved add,adds,adding,added,added learn,learns,learning,learned,learned create,creates,creating,created,created let, agree,agrees,agreeing,agreed,agreed apply,applies,applying,applied,applied wait,waits,waiting,waited,waited avoid,avoids,avoiding,avoided,avoided send,sends,sending,sent,sent form,forms,forming,formed,formed explain,explains,explaining,explained,explained return,returns,returning,returned,returned sell,sells,selling,sold,sold receive,receives,receiving,received,received open,opens,opening,opened,opened begin,begins,beginning,began,begun eat,eats,eating,ate,eaten increase,increases,increasing,increased,increased voice,voices,voicing,voiced,voiced spend,spends,spending,spent,spent join,joins,joining,joined,joined reduce,reduces,reducing,reduced,reduced save,saves,saving,saved,saved require,requires,requiring,required,required fall,falls,falling,fell,fallen mind,minds,minding,minded,minded build,builds,building,built,built,achieve,achieves,achieving,achieved,achieved choose,chooses,choosing,chose,chosen prevent,prevents,preventing,prevented,prevented reach,reaches,reaching,reached,reached decide,decides,deciding,decided,decided deal,deals,dealing,dealt,dealt face,faces,facing,faced,faced enjoy,enjoys,enjoying,enjoyed,enjoyed watch,watches,watching,watched,watched lose,loses,losing,lost,lost walk,walks,walking,walked,walked cover,covers,covering,covered,covered improve,improves,improving,improved,improved tend,tends,tending,tended,tended raise,raises,raising,raised,raised draw,draws,drawing,drew,drawn forget,forgets,forgetting,forgot,forgotten imagine,imagines,imagining,imagined,imagined act,acts,acting,acted,acted pick,picks,picking,picked,picked cause,causes,causing,caused,caused cost,costs,costing,cost,cost pass,passes,passing,passed,passed break,breaks,breaking,broke,broken prove,proves,proving,proved,proved occur,occurs,occurring,occurred,occurred discuss,discusses,discussing,discussed,discussed listen,listens,listening,listened,listened maintain,maintains,maintaining,maintained,maintained end,ends,ending,ended,ended exist,exists,existing,existed,existed seek,seeks,seeking,sought,sought grow,grows,growing,grew,grown check,checks,checking,checked,checked serve,serves,serving,served,served share,shares,sharing,shared,shared establish,establishes,establishing,established,established enter,enters,entering,entered,entered control,controls,controlling,controlled,controlled die,dies,dying,died,died encourage,encourages,encouraging,encouraged,encouraged answer,answers,answering,answered,answered protect,protects,protecting,protected,protected identify,identifies,identifying,identified,identified visit,visits,visiting,visited,visited care,cares,caring,cared,cared enable,enables,enabling,enabled,enabled affect,affects,affecting,affected,affected claim,claims,claiming,claimed,claimed note,notes,noting,noted,noted obtain,obtains,obtaining,obtained,obtained represent,represents,representing,represented,represented contain,contains,containing,contained,contained beat,beats,beating,beat,beaten spread,spreads,spreading,spread,spread worry,worries,worrying,worried,worried bear,bears,bearing,beared,beared shut,shuts,shutting,shut,shut wonder,wonders,wondering,wondered,wondered afford,affords,affording,afforded,afforded fit,fits,fitting,fitted,fitted kill,kills,killing,killed,killed regard,regards,regarding,regarded,regarded describe,describes,describing,described,described place,places,placing,placed,placed drive,drives,driving,drove,driven wear,wears,wearing,wore,worn argue,argues,arguing,argued,argued involve,involves,involving,involved,involved lie,lies,lying,lay,lain contact,contacts,contacting,contacted,contacted catch,catches,catching,caught,caught assume,assumes,assuming,assumed,assumed indicate,indicates,indicating,indicated,indicated operate,operates,operating,operated,operated manage,manages,managing,managed,managed cope,copes,coping,coped,coped remove,removes,removing,removed,removed determine,determines,determining,determined,determined fight,fights,fighting,fought,fought pull,pulls,pulling,pulled,pulled realise,realises,realising,realised,realised reflect,reflects,reflecting,reflected,reflected fill,fills,filling,filled,filled refer,refers,referring,referred,referred gain,gains,gaining,gained,gained examine,examines,examining,examined,examined prefer,prefers,preferring,preferred,preferred travel,travels,travelling,travelled,travelled admit,admits,admitting,admitted,admitted recognise,recognises,recognising,recognised,recognised attend,attends,attending,attended,attended hurt,hurts,hurting,hurt,hurt respond,responds,responding,responded,responded sleep,sleeps,sleeping,slept,slept introduce,introduces,introducing,introduced,introduced depend,depends,depending,depended,depended survive,survives,surviving,survived,survived suffer,suffers,suffering,suffered,suffered notice,notices,noticing,noticed,noticed close,closes,closing,cannot,closed,closed result,results,resulting,resulted,resulted replace,replaces,replacing,replaced,replaced complete,completes,completing,completed,completed miss,misses,missing,missed,missed rise,rises,rising,rose,risen present,presents,presenting,presented,presented arise,arises,arising,arose,arisen point,points,pointing,pointed,pointed fail,fails,failing,failed,failed promote,promotes,promoting,promoted,promoted perform,performs,performing,performed,performed discover,discovers,discovering,discovered,discovered express,expresses,expressing,expressed,expressed extend,extends,extending,extended,extended drink,drinks,drinking,drank,drunk mention,mentions,mentioning,mentioned,mentioned vary,varies,varying,varied,varied concentrate,concentrates,concentrating,concentrated,concentrated benefit,benefits,benefiting,benefited,benefited treat,treats,treating,treated,treated hang,hangs,hanging,hung,hung throw,throws,throwing,threw,thrown prepare,prepares,preparing,prepared,prepared drop,drops,dropping,dropped,dropped study,studies,studying,studied,studied push,pushes,pushing,pushed,pushed press,presses,pressing,pressed,pressed report,reports,reporting,reported,reported cast,casts,casting,cast,cast arrive,arrives,arriving,arrived,arrived sound,sounds,sounding,sounded,sounded finish,finishes,finishing,finished,finished,feed,feeds,feeding,fed,ring,rings,ringing,ringed,ringed test,tests,testing,tested,tested secure,secures,securing,secured,secured collect,collects,collecting,collected,collected escape,escapes,escaping,escaped,escaped teach,teaches,teaching,taught,taught last,lasts,lasting,lasted,lasted welcome,welcomes,welcoming,welcomed,welcomed rely,relies,relying,relied,relied trust,trusts,trusting,trusted,trusted match,matches,matching,matched,matched assess,assesses,assessing,assessed,assessed contribute,contributes,contributing,contributed,contributed repeat,repeats,repeating,repeated,repeated supply,supplies,supplying,supplied,supplied wan, plan,plans,planning,planned,planned reveal,reveals,revealing,revealed,revealed lie lied lay lain laid state,states,stating,stated,statedconfirm,confirms,confirming,confirmed,confirmed,appreciate,appreciates,appreciating,appreciated,appreciated hate,hates,hating,hated,hated relate,relates,relating,related,related overcome,overcomes,overcoming,overcame,overcome",/[\s,]+/),r=t("time, people, way, year, work, government, day, man,men world, life,lives part, house,houses course, case, system, place, end, group, company,companies party,parties information,informations school, fact, money,moneys point, example, state, business,businesses night, area,areas water, half, halves, thing, family,families head, hand, order, john, side, home, week, power, country,countries use, room, problem,problems lot, a,aes war, police, interest,interests car, law,laws road, form, face, education, research,researches sort, office, body,bodies person,persons health,healths mother, question, period, name, book, level, child,children control, society,societies view, door, line, community,communities south, product city,cities god, father, centre,centres effect, staff,staffs position, kind, job, woman,women action, act, process,processes health north, age, idea,ideas west, hight, support, moment, sense, report, mind, church,churches morning, death, change, land, care, century,centuries range, table, back, trade, history,histories study,studies street, rate, word, food,foods language, experience, result, team, other, sir,sirs section, programme, air, role, reason, price, town, class,classes nature, subject, bank, member, value, need, east, practice,practices type, paper, date, decision, figure, right, wife,wives president, university,universities friend, club, quality,qualities voice, lord, stage, king, us, situation, light, tax,taxes production, march,marches art, board, may, hospital, month, music,musics cost, field, award, issue, bed, project, number, chapter, girl, game, amount, basis,bases knowledge,knowledges approach,approaches series,series love, top, news, front, future, labor account, computer, security,securities rest, labour, structure, hair, bill, heart, force, attention, movement, success,successes letter, agreement, analysis,analyses population, mean, meant, behavior performance, page model, material, theory,theories growth, fire, chance, boy, relationship, son, sea, record, size, property,properties space, term, bind, bound, director, plan, behaviour,behaviours treatment, energy,energies st, peter, income, cup, scheme, design, response, association, choice, pressure,",/[\s,]+/),i=t("worst new newest newer present more most poor poorer poorest wrong wronger wrongest natural easy easier easiest simple simpler serious strong sharp, sharper sharpest clear clearer clearest more full great recent greater greatest simplest individual current currenter dangerous different healthy, high, higher,highest healthier healthiest safe, safer safest currentest brown yellow slight slighter slightest major exact quick quicker quickest big bigger biggest pink fast faster fastest careful blue green direct free public necessary immediate large, larger largest red normal close closer closest nice nicer nicest modern moderner good  better similar low lower lowest long longer shorter short shortest longest best able empty",/[\s,]+/),a=t("I we you he she it they me us you her him it them mine ours yours hers his its theirs my our your her his their myself yourself herself himself itself ourselves yourselves themselves myself yourself herself himself itself ourselves yourselves themselves all another any anybody anyone anything both each either everybody everyone everything few many most neither nobody none no one nothing one other others several some somebody someone something interesting such such that these this those what whatever which why where whichever who whoever whom whomever whose as that what whatever whether whichever who whoever whom whomever whose",/[\s,]+/),o=t("A minute the later Accordingly Actually After After time Afterwards Also And Another As an example consequence result soon At last lenght Because Because of this Before Besides Briefly But Consequently Conversely Equally important Finally First example although instance this purpose For this reason Fourth From here on Further Furthermore Gradually Hence However addition In conclusion contrast fact short spite summary end meanwhile meantime way Just important Least Last Last of all Lastly Later Meanwhile Moreover Nevertheless Next Nonetheless Now Nor equal importance contrary following day hand Or Presently Second Similarly Since So Soon Still Subsequently Such next week Then Thereafter Therefore Third Thus specific begin illustrate repeat sum up Too Ultimately What Whatever Whoever Whereas Whomever When While With  mind Yet",/[\s,]+/),d=t("one two three four five six seven eight nine ten",/[\s,]+/),l=t("the only recently off well beyond etc almost sometimes until without never away there over behind main an out again to from by not nt sure down into enough whole among extent prior alone together single during unless between every except against less very vs even across apart anti co always please various how once twice overall up yes no usually rarely under if same within upon much many little often ever than",/[\s,]+/),c=function(e){const t=[];for(let s of e)"l"==s[s.length-1]&&"l"===s[s.length-2]?t.push(`${s}y`):t.push(`${s}ly`);return t}(i);!function(e){for(let t of e)"s"!==t[t.length-1]&&e.push(t+"s")}(r);const p=function(e){let t=[];for(let s=0;s<e.length;s++)t=t.concat(e[s]);return t}([n,r,i,a,o,d,c,l]);function u(e,t){const s=[];for(let n of e){const e=n.toUpperCase(),r=n.toLowerCase(),i=n.charAt(0).toUpperCase()+n.slice(1,n.length);t.includes(n)||t.includes(e)||t.includes(r)||t.includes(i)||s.push(n)}return s}function g(){const e=document.querySelector(".app");e.classList.add("secondScreenApp"),e.innerHTML='<div id="textShowScreen"></div><input type="button" value="+" id="addNewTerm"><select id="whichAdditionalScreens" name="whichAdditionalScreen"><option value="examples">show example sentences</option><option value="parallelText">show a parallel text</option></select><form id="occurrenciesForm"><ul class="occurrenciesList" id="occurrenciesListNoTranslation"></ul></form><div id="parallelTextArea"><input type="button" value="accept" id="acceptParallelTextButton"><textarea placeholder="Paste a parallel text"></textarea></div><input type="button" id="downloadList" value="download a txt list">'}function h(e,t){const s=document.querySelector("#textShowScreen");let n=e;for(let e of t)n=n.replaceAll(e[0],`<span class="emphasizedWord">${e[0]}</span>`);s.innerHTML=n}function m(e,t){const s=t,n=document.querySelector("#parallelTextArea"),r=document.querySelector("#occurrenciesForm");if("parallelText"===e.value){for(let e of s)e.style.display="none";n.style.display="initial",r.style.gridColumn="span 1"}else if("examples"===e.value){for(let e of s)e.style.display="grid";n.style.display="none",r.style.gridColumn="span 2"}}function f(e){let t=0;const s=e;for(let e of s)e.querySelector(".originalWord").setAttribute("termIndex",t.toString()),e.querySelector(".translatedWord").setAttribute("termIndex",(t+s.length).toString()),t++}function v(){const e=document.querySelector("#parallelTextArea");if("TEXTAREA"===e.lastElementChild.tagName){const t=e.querySelector("textarea").value;e.innerHTML=`<input type="button" value="accept" id="acceptParallelTextButton"><div>${t}</div>`,e.style.position="sticky",e.style.top="0",e.style.minHeight="auto",e.style.maxHeight="calc(100vh - 80px)",e.querySelector('input[type="button"]').value="change parallel text",document.querySelector("#acceptParallelTextButton").addEventListener("click",v)}else"DIV"===e.lastElementChild.tagName&&(e.innerHTML='<input type="button" value="accept" id="acceptParallelTextButton"><textarea></textarea>',document.querySelector("#acceptParallelTextButton").addEventListener("click",v))}const w=document.querySelector("#createListButton"),y=document.querySelector("#autoextractionCheckbox");let b=e(y);const k=document.querySelector("#selectLanguage"),x=document.querySelector("#minNumOfOccurrencies");let S=+x.value;x.addEventListener("input",(()=>{S=+x.value})),y.addEventListener("input",(()=>{b=e(y)})),w.addEventListener("click",(()=>{!function(e,n,r){let i=document.querySelector("#textImputArea").value;if("extract"===r){const r=function(e){const t=[];for(let s of e)s[0]===s[0].toLowerCase()?t.push(s):e.includes(s.toLowerCase())?t.push(s.toLowerCase()):t.push(s);return t}(function(e){const t=[];for(let s of e)s!==(+s).toString()&&t.push(s);return t}(function(e){const t=[];for(let s of e)s.length>1&&t.push(s);return t}(function(e){const t=[];for(let s of e){const e=s.replace(/[\.,\/#!\[\]\"\'\”\„$%\^&\*;:{}=\_`~()@\+\?><\[\]\+]/g,"").replace(/\s{2,}/g," ");t.push(e)}return t}(t(i,/[\s’']+/)))));let a,o=[];switch(e){case"English":o=s(r);break;default:o=s(r)}switch(e){case"English":a=u(o,p);break;default:a=u(o,p)}const d=function(e,t){const s=[];for(let n of t)n[1]>=e&&s.push(n);return s}(n,function(e){const t=new Map;for(let s of e)t.has(s)?t.set(s,t.get(s)+1):t.set(s,1);return Array.from(t)}(a)).sort(((e,t)=>t[1]-e[1]));g(),function(e,t){const s=document.querySelector("#occurrenciesListNoTranslation"),n=t.split(".");for(let t of e){const e=[];for(let s of n)s.includes(t[0])&&e.push(s.replaceAll(t[0],`<span class="emphasizedWord">${t[0]}</span>`)+".");s.innerHTML+=`<li class='term'><input type='text' value='${t[0]}' class='originalWord'><input type='text' class='translatedWord'><div class="example"><p class="exampleArrow exampleArrowLeft"><<</p><p class='exampleMain'><span>${e[0]}</span></p><p class="exampleArrow exampleArrowRight">>></p></div></li>`}}(d,i),f(document.getElementsByClassName("term")),h(i,d)}else"notExtract"===r&&(g(),h(i,[]));!function(e,t){const s=t.split(".");for(let t of e){const e=t.querySelector(".exampleArrowRight"),n=t.querySelector(".exampleArrowLeft"),r=t.querySelector(".originalWord"),i=[],a=t.querySelector(".exampleMain span");for(let e of s)e.includes(r.value)&&(i.includes(e)||i.push(e.replaceAll(r.value,`<span class="emphasizedWord">${r.value}</span>`)+"."));i.indexOf(a.innerHTML)<0&&(a.innerHTML=i[0]),e.addEventListener("click",(()=>{let e=i.indexOf(a.innerHTML);e>=i.length-1?a.innerHTML=i[0]:a.innerHTML=i[e+1]})),n.addEventListener("click",(()=>{let e=i.indexOf(a.innerHTML);a.innerHTML=0===e?i[i.length-1]:i[e-1]}))}}(document.getElementsByTagName("li"),i);const a=document.querySelector("#whichAdditionalScreens"),o=document.getElementsByClassName("example");m(a,o),a.addEventListener("change",(()=>{m(a,o)})),document.querySelector("#addNewTerm").addEventListener("click",(()=>{const e=document.querySelector("#occurrenciesListNoTranslation"),t=document.createElement("li");t.setAttribute("class","term"),t.innerHTML='<input type="text" class="originalWord"><input type="text" class="translatedWord"><div class="example"><p class="exampleArrow exampleArrowLeft"><<</p><p class="exampleMain"><span><input type="text"></span></p><p class="exampleArrow exampleArrowRight">>></p></div>',e.insertBefore(t,e.firstElementChild),m(a,o),f(document.getElementsByClassName("term"))})),document.querySelector("#acceptParallelTextButton").addEventListener("click",v);const d=document.querySelector("#downloadList");null==d||d.addEventListener("click",(()=>{!function(e,t){const s=document.createElement("a");s.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(t)),s.setAttribute("download","glossary"),s.style.display="none",document.body.appendChild(s),s.click(),document.body.removeChild(s)}(0,function(){const e=document.getElementsByClassName("term");let t="";for(let s of e){const e=s.querySelector(".originalWord").value,n=s.querySelector(".translatedWord").value;""!==e.trim()&&""!==n.trim()&&(t+=`${e}\t${null==n?void 0:n.replace(" / ","\t")}\n`)}const s=t.split("\n").sort();let n="";for(let e of s)n+=`${e}\n`;return n}())}))}(k.value,S,b)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,